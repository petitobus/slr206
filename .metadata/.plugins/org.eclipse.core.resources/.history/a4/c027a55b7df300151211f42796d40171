package linkedlists.lockbased;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import contention.abstractions.AbstractCompositionalIntSet;

public class OptimisticListBasedSet extends AbstractCompositionalIntSet {


    // sentinel nodes
    private Node head;
    private Node tail;
    private Lock lock = new ReentrantLock();

    public OptimisticListBasedSet(){     
	  head = new Node(Integer.MIN_VALUE);
	  tail = new Node(Integer.MAX_VALUE);
      head.next = tail;
    }
	
	@Override
	public boolean addInt(int x) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeInt(int x) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsInt(int x) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub

	}
	
	private boolean validate(Node pred, Node curr){
		Node node=head;
		while (node.value <= pred.value){
			if(node == pred){
				return pred.next==curr;
			}
			node=node.next;
		}
		return false;
	}
}

